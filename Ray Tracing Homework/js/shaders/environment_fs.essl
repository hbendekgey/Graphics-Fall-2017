Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;

	// for applying the texture coloring
	varying vec3 rayDir;
	uniform sampler2D probeTexture;

	uniform vec3 cameraPos;

	uniform vec4 lightPos[3];
	uniform vec3 lightPowerDensity[3];
	uniform mat4 quadrics[60];
	uniform vec4 brdfs[20];


	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);

		if (a == 0.0) {
			float t =  -1.0 * c / b;
			vec4 r =  e + (d * t);
			if (!(t >= 0.0 && dot(r * B, r) <= 0.0)) {
				return -1.0;
			} else {
				return t;
			}
		}

		float discriminant = pow(b, 2.0) - 4.0 * a * c;
		if (discriminant < 0.0) {
			return -1.0;
		}
		float t1 = ((-1.0 * b) + sqrt(discriminant)) / (2.0 * a);
		float t2 = ((-1.0 * b) - sqrt(discriminant)) / (2.0 * a);

		vec4 r1 =  e + (d * t1);
		vec4 r2 =  e + (d * t2);

		bool t1Valid = t1 >= 0.0 && dot(r1 * B, r1) <= 0.0;
		bool t2Valid = t2 >= 0.0 && dot(r2 * B, r2) <= 0.0;
		if (!t1Valid && !t2Valid) {
			return -1.0;
		} else if (!t1Valid) {
			return t2;
		} else if (!t2Valid) {
			return t1;
		} else {
			return min(t1, t2);
		}
	}

	float intersectClippedQuadric(mat4 A, mat4 B, mat4 C, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);

		if (a == 0.0) {
			float t =  -1.0 * c / b;
			vec4 r =  e + (d * t);
			if (!(t >= 0.0 && dot(r * B, r) <= 0.0 && dot(r * C, r) <= 0.0)) {
				return -1.0;
			} else {
				return t;
			}
		}

		float discriminant = pow(b, 2.0) - 4.0 * a * c;
		if (discriminant < 0.0) {
			return -1.0;
		}
		float t1 = ((-1.0 * b) + sqrt(discriminant)) / (2.0 * a);
		float t2 = ((-1.0 * b) - sqrt(discriminant)) / (2.0 * a);

		vec4 r1 =  e + (d * t1);
		vec4 r2 =  e + (d * t2);

		bool t1Valid = t1 >= 0.0 && dot(r1 * B, r1) <= 0.0 && dot(r1 * C, r1) <= 0.0;
		bool t2Valid = t2 >= 0.0 && dot(r2 * B, r2) <= 0.0 && dot(r2 * C, r2) <= 0.0;
		if (!t1Valid && !t2Valid) {
			return -1.0;
		} else if (!t1Valid) {
			return t2;
		} else if (!t2Valid) {
			return t1;
		} else {
			return min(t1, t2);
		}
	}

	float snoise(vec3 r) {
  		vec3 s = vec3(7502.0, 22777.0, 4767.0);
  		float w = 0.0;
  		for(int i=0; i<16; i++) {
    		w += sin( dot(s - vec3(32768, 32768, 32768), r * 40.0) / 65536.0);
    		s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
  		}
  		return w / 32.0 + 0.5;
	}

  	vec3 woodColor(vec3 worldPos) {
	    float scale = 4.0;
	    float turbulence = 4.0;
	    float period = 8.0;
	    float sharpness = 1.0;
	    float w = worldPos.x * period + pow(snoise(worldPos * scale), sharpness) * turbulence; 
	    w -= floor(w);
	    return vec3(1.0, 0.3, 0.0) * w + vec3(0.35, 0.1, 0.05) * (1.0 - w);
	}

  	vec3 marbleColor(vec3 worldPos) {
		float scale = 12.0;
    	float turbulence = 18.0;
    	float period = 12.0;
    	float sharpness = 1.0;

	    float w = worldPos.x * period + pow(snoise(worldPos * scale), sharpness) * turbulence; 
	    w = pow(sin(w) * 0.5 + 0.5, 4.0);
	    return vec3(0.0, 0.0, 1.0) * w + vec3(1.0, 1.0, 1.0) * (1.0 - w);
	}


    bool shadowCast(vec4 e, vec4 d) {
    	float t;
		for (int i = 1; i < 15; i++) {
			t = intersectClippedQuadric(quadrics[2*i+1], quadrics[(2*i)+2], e + (normalize(vec4(d.xyz,0.0)) / 10.0), vec4(d.xyz,0.0));
			if (t > 0.00 && (t < 1.0 || d.w == 0.0)) {
				return true;
			}
		}

		for (int i = 15; i < 16; i++) {
			t = intersectClippedQuadric(quadrics[2*i+1], quadrics[(2*i)+2], quadrics[(2*i)+3], e + (normalize(vec4(d.xyz,0.0)) / 10.0), vec4(d.xyz,0.0));
			if (t > 0.00 && (t < 1.0 || d.w == 0.0)) {
				return true;
			}
		}
		return false;
	}

	vec4 shadeDiffuse(vec3 worldPos, vec3 worldNormal, vec3 baseColor) {
		vec3 apparentColor = vec3(0,0,0);
		for (int i = 0; i < 3; i++) {
			vec3 lightDir = lightPos[i].xyz - (worldPos * lightPos[i].w);
			if (!shadowCast(vec4(worldPos,1),vec4(lightDir,lightPos[i].w))) {
				float cos = dot(normalize(worldNormal), normalize(lightDir));
				vec3 M = lightPowerDensity[i] / dot(lightDir,lightDir);
				apparentColor = apparentColor + max(cos, 0.0) * baseColor * M;
			}
		}
		return vec4(apparentColor, 1);
	}


	vec4 shadeShiny(vec3 worldPos, vec3 worldNormal) {
		vec4 baseColor = vec4(1.0, 1.0, 1.0, 1.0);
		vec3 apparentColor = vec3(0,0,0);
		for (int i = 0; i < 3; i++) {
			vec3 lightDir = lightPos[i].xyz - (worldPos * lightPos[i].w);
			if (!shadowCast(vec4(worldPos,1),vec4(lightDir,lightPos[i].w))) {
				vec3 h = normalize(lightDir) + normalize(cameraPos - worldPos);
				float cos = dot(normalize(worldNormal), normalize(h));
				float shininess = pow(max(cos, 0.0),5.0);
				vec3 M = lightPowerDensity[i] / dot(lightDir,lightDir);
				apparentColor = apparentColor + shininess * baseColor.xyz * M;
			}
		}
		return vec4(apparentColor, 1);
	}

	vec4 shadeBoard(vec3 worldPos, vec3 worldNormal) {
		vec3 baseColor;
		if (mod(floor(worldPos.x ) + floor(worldPos.z ), 2.0) == 1.0) {
			baseColor = marbleColor(worldPos);
		} else {
			baseColor = woodColor(worldPos);
		}
		return shadeDiffuse(worldPos, worldNormal, baseColor);
    }

	bool findBestHit(vec4 e, vec4 d, out vec4 bestBrdf, out mat4 bestA, out float bestT) {
		bestT = 1000000.0;
		bool foundHit = false;

		// for ground
		float newT = intersectClippedQuadric(quadrics[0], quadrics[1], quadrics[2], e, d);
		if (newT > 0.0 && newT < bestT) {
			bestT = newT;
			bestBrdf = brdfs[0];
			bestA = quadrics[0];
			foundHit = true;
		}
		
		for (int i = 1; i < 15; i++) {
			newT = intersectClippedQuadric(quadrics[2*i+1], quadrics[(2*i)+2], e, d);
			if (newT > 0.0 && newT < bestT) {
				bestT = newT;
				bestBrdf = brdfs[i];
				bestA = quadrics[2*i+1];
				foundHit = true;
			}
		}

		for (int i = 15; i < 16; i++) {
			newT = intersectClippedQuadric(quadrics[2*i+1], quadrics[(2*i)+2], quadrics[2*i+3], e, d);
			if (newT > 0.0 && newT < bestT) {
				bestT = newT;
				bestBrdf = brdfs[i];
				bestA = quadrics[2*i+1];
				foundHit = true;
			}
		}
		return foundHit;
	}

	vec4 shadeEnvironment(vec3 ray) {
		vec3 mirrorSphereCoord = normalize(vec3(0.0,0.0,1.0) + normalize(ray)) / 2.0;
		vec2 probeTex = vec2(mirrorSphereCoord.x, -1.0 * mirrorSphereCoord.y) + vec2(0.5, 0.5);
		return texture2D(probeTexture, probeTex);
	}

	vec4 shadeMirror(vec3 worldPos, vec3 worldNormal) {
		vec3 reflDir = rayDir;
		vec3 reflPos = worldPos;
		vec3 normal = worldNormal;
		vec4 bestBrdf;
		mat4 bestA;
		float bestT;

		for (int i = 0; i < 5; i++) {
			reflDir = reflect(normalize(normalize(rayDir)), normalize(normal));
			vec4 e = vec4(reflPos + normalize(reflDir) / 10.0, 1.0);
			vec4 d = vec4(reflDir, 0.0);
			if (!findBestHit(e, d, bestBrdf, bestA, bestT)) {
				return shadeEnvironment(reflDir);
			}
			reflPos = (e + d * bestT).xyz;
			normal = normalize((bestA * vec4(reflPos, 1.0) + vec4(reflPos, 1.0) * bestA).xyz);
			if (bestBrdf.w == 0.0) {
				return shadeBoard(reflPos, normal);
			} else if (bestBrdf.w == 1.0) {
				return shadeShiny(reflPos, normal);
			} else if (bestBrdf.w == 2.0) {
				return shadeDiffuse(reflPos, normal, vec3(0.8,0.8,0.8));
			}
		}
		return shadeDiffuse(worldPos, worldNormal, vec3(0.8,0.8,0.8));
	}

	void main(void) {
		vec4 e = vec4(cameraPos, 1.0);
		vec4 d = vec4(rayDir, 0.0);

		vec4 bestBrdf;
		mat4 bestA;
		float bestT;
		if (findBestHit(e, d, bestBrdf, bestA, bestT)) {
			vec4 r = e + d * bestT;
			vec3 normal = normalize((bestA * r + r * bestA).xyz);
			if (bestBrdf.w == 0.0) {
				gl_FragColor = shadeBoard(r.xyz, normal);

			} else if (bestBrdf.w == 1.0) {
				gl_FragColor = shadeShiny(r.xyz, normal);
			} else if (bestBrdf.w == 2.0) {
				gl_FragColor = shadeDiffuse(r.xyz, normal, vec3(0.8,0.8,0.8));
			} else {
				gl_FragColor = shadeMirror(r.xyz, normal);
			}
		} else {
			gl_FragColor = shadeEnvironment(rayDir);
		}
	}
`;
